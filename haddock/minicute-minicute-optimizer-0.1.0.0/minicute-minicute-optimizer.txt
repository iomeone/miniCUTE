-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Experimental package for a language implemented by Haskell
--   
--   This package is only for experiment to implement CUTE Lang. Do not use
--   this any other purpose. This package would introduce breaking changes
--   without any notifications.
@package minicute-minicute-optimizer
@version 0.1.0.0


-- | Transpilers to extract free variable information of expressions
module Minicute.Transpilers.FreeVariables

-- | A set of identifiers that are free in the annotated expression
type FreeVariables = Set Identifier

-- | A transpiler to create free variable information for
--   <a>MainProgram</a>
formFreeVariablesMain :: MainProgram t l -> MainProgram ( 'AnnotatedWith FreeVariables) l

-- | A transpiler to create free variable information for <a>Program</a>
formFreeVariables :: Getter a Identifier -> Program t l a -> Program ( 'AnnotatedWith FreeVariables) l a


-- | Optimizers to remove immediate applications.
module Minicute.Transpilers.Optimizers.ImmediateApplication

-- | An optimizer to remove immediate applications in a whole program.
immediateApplicationMainMC :: MainProgram  'Simple  'MC -> MainProgram  'Simple  'MC


-- | Optimizers to remove immediate matches.
module Minicute.Transpilers.Optimizers.ImmediateMatch

-- | An optimizer to remove immediate matches in a whole program.
immediateMatchMainMC :: MainProgram  'Simple  'MC -> MainProgram  'Simple  'MC


-- | Optimizers to merge consecutive lambda expressions.
module Minicute.Transpilers.Optimizers.LambdaMerge

-- | An optimizer to merge consecutive lambda expressions in a whole
--   program.
lambdaMergeMainMC :: MainProgram  'Simple  'MC -> MainProgram  'Simple  'MC


-- | Optimizers to reduce simple arithmetic expressions.
module Minicute.Transpilers.Optimizers.SimpleArithmetic

-- | An optimizer to reduce simple arithmetic expressions in a whole
--   program.
simpleArithmeticMainMC :: MainProgram  'Simple  'MC -> MainProgram  'Simple  'MC


-- | Transpilers to rename variables to avoid name collision.
module Minicute.Transpilers.VariablesRenaming

-- | A transpiler to rename variables in <a>MainProgram</a>
renameVariablesMain :: MainProgram t l -> MainProgram t l


-- | Transpilers to lift all lambda expressions as supercombinators
--   (top-level function definitions)
module Minicute.Transpilers.Lifting.Lambda

-- | Following function is based on the book
--   
--   <ul>
--   <li>Hughes, R. J. M. (<b>1983</b>) <i>Design and Implementation of
--   Programming Languages</i></li>
--   </ul>
--   
--   For an alternative implementation, see
--   
--   <ul>
--   <li>Johnsson, T. (<b>1985</b>) <i>Lambda Lifting: Transforming
--   Programs to Recursive Equations</i></li>
--   </ul>
lambdaLifting :: MainProgram t l -> MainProgram  'Simple  'LLMC
