-- Hoogle documentation, generated by Haddock
-- See Hoogle, http://www.haskell.org/hoogle/


-- | Experimental package for a language implemented by Haskell
--   
--   This package is only for experiment to implement CUTE Lang. Do not use
--   this any other purpose. This package would introduce breaking changes
--   without any notifications. For EBNF syntax, see
--   <a>https://github.com/CUTE-Lang/miniCUTE/blob/master/g-machine-syntax/README.md</a>
@package minicute-g-machine-syntax
@version 0.1.0.0


-- | Instructions and other helper types for G-Machine
module Minicute.Data.GMachine.Instruction

-- | A G-Machine program.
type GMachineProgram = [GMachineSupercombinator]

-- | A G-Machine top-level definition.
--   
--   It contains
--   
--   <ul>
--   <li><i><tt>Identifier</tt></i> The identifier for the
--   Supercombinator.</li>
--   <li><i><tt>Int</tt></i> The arity of the Supercombinator.</li>
--   <li><i><tt>GMachineExpression</tt></i> The code for the
--   Supercombinator.</li>
--   </ul>
type GMachineSupercombinator = (Identifier, Int, GMachineExpression)

-- | A G-Machine expression
type GMachineExpression = [Instruction]

-- | A G-Machine instruction
data Instruction
IMakeInteger :: Integer -> Instruction
IMakeConstructor :: Integer -> Integer -> Instruction
IMakeStructure :: Integer -> Integer -> Instruction
IMakeApplication :: Instruction
IMakeGlobal :: Identifier -> Instruction
IMakePlaceholders :: Int -> Instruction
IPop :: Int -> Instruction
IDig :: Int -> Instruction
IUpdate :: Int -> Instruction
ICopy :: Int -> Instruction
IPushBasicValue :: Integer -> Instruction
IPushExtractedValue :: Instruction
IWrapAsInteger :: Instruction
IWrapAsStructure :: Instruction
IUpdateAsInteger :: Int -> Instruction
IUpdateAsStructure :: Int -> Instruction
IPrimitive :: Primitive -> Instruction
IUnwind :: Instruction
IDestruct :: Integer -> Instruction
IEval :: Instruction
IReturn :: Instruction
IMatch :: MatchTable -> Instruction

-- | Table expressing a match expression.
--   
--   <ul>
--   <li><i><tt>[MatchEntry]</tt></i> cases in the match expression.</li>
--   </ul>
newtype MatchTable
MatchTable :: [MatchEntry] -> MatchTable

-- | Entry expressing a <tt>match</tt> case.
--   
--   <ul>
--   <li><i><tt>Integer</tt></i> the tag of the case.</li>
--   <li><i><tt>GMachineExpression</tt></i> the instructions of the
--   case.</li>
--   </ul>
newtype MatchEntry
MatchEntry :: (Integer, GMachineExpression) -> MatchEntry
instance GHC.Show.Show Minicute.Data.GMachine.Instruction.MatchTable
instance GHC.Classes.Ord Minicute.Data.GMachine.Instruction.MatchTable
instance GHC.Classes.Eq Minicute.Data.GMachine.Instruction.MatchTable
instance Language.Haskell.TH.Syntax.Lift Minicute.Data.GMachine.Instruction.MatchTable
instance Data.Data.Data Minicute.Data.GMachine.Instruction.MatchTable
instance GHC.Generics.Generic Minicute.Data.GMachine.Instruction.MatchTable
instance GHC.Show.Show Minicute.Data.GMachine.Instruction.Instruction
instance GHC.Classes.Ord Minicute.Data.GMachine.Instruction.Instruction
instance GHC.Classes.Eq Minicute.Data.GMachine.Instruction.Instruction
instance Language.Haskell.TH.Syntax.Lift Minicute.Data.GMachine.Instruction.Instruction
instance Data.Data.Data Minicute.Data.GMachine.Instruction.Instruction
instance GHC.Generics.Generic Minicute.Data.GMachine.Instruction.Instruction
instance GHC.Show.Show Minicute.Data.GMachine.Instruction.MatchEntry
instance GHC.Classes.Ord Minicute.Data.GMachine.Instruction.MatchEntry
instance GHC.Classes.Eq Minicute.Data.GMachine.Instruction.MatchEntry
instance Language.Haskell.TH.Syntax.Lift Minicute.Data.GMachine.Instruction.MatchEntry
instance Data.Data.Data Minicute.Data.GMachine.Instruction.MatchEntry
instance GHC.Generics.Generic Minicute.Data.GMachine.Instruction.MatchEntry


-- | Parser functions for G-Machine
module Minicute.Parser.GMachine.Parser

-- | <tt>Parser</tt> is a concrete type for parsers.
type Parser = Parsec Void String

-- | A G-Machine program.
type GMachineProgram = [GMachineSupercombinator]

-- | A parser for a G-Machine program.
gMachineProgram :: Parser GMachineProgram


-- | G-machine syntax utilities for miniCUTE compiler using TemplateHaskell
module Minicute.Utils.GMachine.TH

-- | parse quoted string as a <a>GMachineProgram</a>.
qqGMachine :: QuasiQuoter

-- | parse quoted string as an indented code text.
qqRawCode :: QuasiQuoter
